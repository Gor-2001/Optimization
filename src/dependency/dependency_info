Instruction Dependency Test Description
---------------------------

This test is designed to illustrate the effects of CPU instruction dependencies and memory access patterns on performance. It is intended for educational purposes and demonstrates how the order of operations can influence execution speed.

Two experiments are performed:

Neighbor Addition
Each element in the dataset is incremented by the value of its immediate neighbor. For example, element 0 is incremented by element 1, element 1 by element 2, and so on, with the last element incremented by the first element. This creates a chain of read-after-write dependencies, which can limit parallel execution and prevent vectorization by the CPU.

Halfway Addition
Each element is incremented by the value of the element halfway around the dataset (e.g., element 0 is incremented by element 8, element 1 by element 9, etc.). In this case, the source elements for each operation are independent of the targets in the same iteration, allowing instruction-level parallelism and vectorization.

By comparing the execution times of these two experiments, the test demonstrates how data dependencies and access patterns can significantly affect performance, even on small arrays. The halfway addition usually executes faster due to reduced dependencies and improved CPU optimization opportunities.
